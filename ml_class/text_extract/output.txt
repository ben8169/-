Python 3.9.6 (default, Feb  3 2024, 15:58:27)
[Clang 15.0.0 (clang-1500.3.9.4)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> f = open('myname.txt','r')
>>> st = f.read()
>>> st=st.lower()
>>> my_dic = dict()
>>> import nltk
>>> from nltk.stem import WordNetLemmatizer
>>> from nltk import pos_tag
>>> import pickle
>>> lemmatizer = WordNetLemmatizer()
>>> pos_tags = pos_tag(st.split())
>>> for word, tag in pos_tags:
...     if word == "cloud":
...         word = "cloud computing"
...     elif word == "computing":
...         continue
...     else:
...         pass
...     base_form = lemmatizer.lemmatize(word)
...     my_dic[word] = [base_form, tag]
...
>>> cnt = 0
>>> while cnt<5:
...     new_word = input()
...     if new_word in my_dic:
...         print(my_dic[new_word])
...     else:
...         my_dic[new_word] = [lemmatizer.lemmatize(new_word),pos_tag(list(new_word))]
...         cnt += 1
...         print(f"new_word:{cnt}")
...
cloud computing
['cloud computing', 'JJ']
a
['a', 'DT']
is
['is', 'VBZ']
over
['over', 'IN']
hello
new_word:1
new
new_word:2
math
new_word:3
think
new_word:4
insight
new_word:5
>>> with open('my_dic.json', 'wb') as f:
...     pickle.dump(my_dic, f)
...
>>> ^D
 ben8169@Someones-MacBook-Pro  ~/Documents/GitHub/Study/ml_class/text_extract   main  ls
Python_basic.py a.ipynb         myname.txt      test.py
Text_Extract.py my_dic.json     result.txt
 ben8169@Someones-MacBook-Pro  ~/Documents/GitHub/Study/ml_class/text_extract   main  rm my_dic.json
 ben8169@Someones-MacBook-Pro  ~/Documents/GitHub/Study/ml_class/text_extract   main  ls
Python_basic.py a.ipynb         result.txt
Text_Extract.py myname.txt      test.py
 ben8169@Someones-MacBook-Pro  ~/Documents/GitHub/Study/ml_class/text_extract   main  python3
Python 3.9.6 (default, Feb  3 2024, 15:58:27)
[Clang 15.0.0 (clang-1500.3.9.4)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> f = open('myname.txt','r')
>>> st = f.read()
>>> st=st.lower()
>>> st
"cloud computing is a term for delivering hosted services over the internet. over a network, it gives services control over such things as a user's data and software. it has many adventages compared to the traditional way of storing data. for one thing, it only requires users to have a computer and access to the internet. with cloud computing, users can access software and data stored on servers at a remote location from a number of different devices."
>>> my_dic = dict()
>>> import nltk
>>> from nltk.stem import WordNetLemmatizer
>>> from nltk import pos_tag
>>> import pickle
>>> lemmatizer = WordNetLemmatizer()
>>> pos_tags = pos_tag(st.split())
>>> for word, tag in pos_tags:
...     if word == "cloud":
...         word = "cloud computing"
...     elif word == "computing":
...         continue
...     else:
...         pass
...     base_form = lemmatizer.lemmatize(word)
...     my_dic[word] = [base_form, tag]
...
>>> my_dic
{'cloud computing': ['cloud computing', 'JJ'], 'is': ['is', 'VBZ'], 'a': ['a', 'DT'], 'term': ['term', 'NN'], 'for': ['for', 'IN'], 'delivering': ['delivering', 'VBG'], 'hosted': ['hosted', 'JJ'], 'services': ['service', 'NNS'], 'over': ['over', 'IN'], 'the': ['the', 'DT'], 'internet.': ['internet.', 'NN'], 'network,': ['network,', 'JJ'], 'it': ['it', 'PRP'], 'gives': ['give', 'VBZ'], 'control': ['control', 'NN'], 'such': ['such', 'JJ'], 'things': ['thing', 'NNS'], 'as': ['a', 'IN'], "user's": ["user's", 'JJ'], 'data': ['data', 'NNS'], 'and': ['and', 'CC'], 'software.': ['software.', 'NN'], 'has': ['ha', 'VBZ'], 'many': ['many', 'JJ'], 'adventages': ['adventages', 'NNS'], 'compared': ['compared', 'VBN'], 'to': ['to', 'TO'], 'traditional': ['traditional', 'JJ'], 'way': ['way', 'NN'], 'of': ['of', 'IN'], 'storing': ['storing', 'VBG'], 'data.': ['data.', 'NN'], 'one': ['one', 'CD'], 'thing,': ['thing,', 'NN'], 'only': ['only', 'RB'], 'requires': ['requires', 'VBZ'], 'users': ['user', 'NNS'], 'have': ['have', 'VB'], 'computer': ['computer', 'NN'], 'access': ['access', 'NN'], 'with': ['with', 'IN'], 'computing,': ['computing,', 'NN'], 'can': ['can', 'MD'], 'software': ['software', 'NN'], 'stored': ['stored', 'VBN'], 'on': ['on', 'IN'], 'servers': ['server', 'NNS'], 'at': ['at', 'IN'], 'remote': ['remote', 'JJ'], 'location': ['location', 'NN'], 'from': ['from', 'IN'], 'number': ['number', 'NN'], 'different': ['different', 'JJ'], 'devices.': ['devices.', 'NN']}
>>> cnt = 0
>>> while cnt<5:
...     new_word = input()
...     if new_word in my_dic:
...         print(my_dic[new_word])
...     else:
...         my_dic[new_word] = [lemmatizer.lemmatize(new_word),pos_tag([new_word])[0][1]]
...         cnt += 1
...         print(f"new_word:{cnt}")
...
cloud computing
['cloud computing', 'JJ']
is
['is', 'VBZ']
a
['a', 'DT']
over
['over', 'IN']
the
['the', 'DT']
hello
new_word:1
my
new_word:2
name
new_word:3
is
['is', 'VBZ']
was
new_word:4
jiheon
new_word:5
>>> my_dic
{'cloud computing': ['cloud computing', 'JJ'], 'is': ['is', 'VBZ'], 'a': ['a', 'DT'], 'term': ['term', 'NN'], 'for': ['for', 'IN'], 'delivering': ['delivering', 'VBG'], 'hosted': ['hosted', 'JJ'], 'services': ['service', 'NNS'], 'over': ['over', 'IN'], 'the': ['the', 'DT'], 'internet.': ['internet.', 'NN'], 'network,': ['network,', 'JJ'], 'it': ['it', 'PRP'], 'gives': ['give', 'VBZ'], 'control': ['control', 'NN'], 'such': ['such', 'JJ'], 'things': ['thing', 'NNS'], 'as': ['a', 'IN'], "user's": ["user's", 'JJ'], 'data': ['data', 'NNS'], 'and': ['and', 'CC'], 'software.': ['software.', 'NN'], 'has': ['ha', 'VBZ'], 'many': ['many', 'JJ'], 'adventages': ['adventages', 'NNS'], 'compared': ['compared', 'VBN'], 'to': ['to', 'TO'], 'traditional': ['traditional', 'JJ'], 'way': ['way', 'NN'], 'of': ['of', 'IN'], 'storing': ['storing', 'VBG'], 'data.': ['data.', 'NN'], 'one': ['one', 'CD'], 'thing,': ['thing,', 'NN'], 'only': ['only', 'RB'], 'requires': ['requires', 'VBZ'], 'users': ['user', 'NNS'], 'have': ['have', 'VB'], 'computer': ['computer', 'NN'], 'access': ['access', 'NN'], 'with': ['with', 'IN'], 'computing,': ['computing,', 'NN'], 'can': ['can', 'MD'], 'software': ['software', 'NN'], 'stored': ['stored', 'VBN'], 'on': ['on', 'IN'], 'servers': ['server', 'NNS'], 'at': ['at', 'IN'], 'remote': ['remote', 'JJ'], 'location': ['location', 'NN'], 'from': ['from', 'IN'], 'number': ['number', 'NN'], 'different': ['different', 'JJ'], 'devices.': ['devices.', 'NN'], 'hello': ['hello', 'NN'], 'my': ['my', 'PRP$'], 'name': ['name', 'NN'], 'was': ['wa', 'VBD'], 'jiheon': ['jiheon', 'NN']}
>>> with open('my_dic.json', 'wb') as f:
...     pickle.dump(my_dic, f)
...
>>> with open('my_dic.json', 'rb') as f:
...     my_dic_read = pickle.load(f)
...
>>> my_dic_read
{'cloud computing': ['cloud computing', 'JJ'], 'is': ['is', 'VBZ'], 'a': ['a', 'DT'], 'term': ['term', 'NN'], 'for': ['for', 'IN'], 'delivering': ['delivering', 'VBG'], 'hosted': ['hosted', 'JJ'], 'services': ['service', 'NNS'], 'over': ['over', 'IN'], 'the': ['the', 'DT'], 'internet.': ['internet.', 'NN'], 'network,': ['network,', 'JJ'], 'it': ['it', 'PRP'], 'gives': ['give', 'VBZ'], 'control': ['control', 'NN'], 'such': ['such', 'JJ'], 'things': ['thing', 'NNS'], 'as': ['a', 'IN'], "user's": ["user's", 'JJ'], 'data': ['data', 'NNS'], 'and': ['and', 'CC'], 'software.': ['software.', 'NN'], 'has': ['ha', 'VBZ'], 'many': ['many', 'JJ'], 'adventages': ['adventages', 'NNS'], 'compared': ['compared', 'VBN'], 'to': ['to', 'TO'], 'traditional': ['traditional', 'JJ'], 'way': ['way', 'NN'], 'of': ['of', 'IN'], 'storing': ['storing', 'VBG'], 'data.': ['data.', 'NN'], 'one': ['one', 'CD'], 'thing,': ['thing,', 'NN'], 'only': ['only', 'RB'], 'requires': ['requires', 'VBZ'], 'users': ['user', 'NNS'], 'have': ['have', 'VB'], 'computer': ['computer', 'NN'], 'access': ['access', 'NN'], 'with': ['with', 'IN'], 'computing,': ['computing,', 'NN'], 'can': ['can', 'MD'], 'software': ['software', 'NN'], 'stored': ['stored', 'VBN'], 'on': ['on', 'IN'], 'servers': ['server', 'NNS'], 'at': ['at', 'IN'], 'remote': ['remote', 'JJ'], 'location': ['location', 'NN'], 'from': ['from', 'IN'], 'number': ['number', 'NN'], 'different': ['different', 'JJ'], 'devices.': ['devices.', 'NN'], 'hello': ['hello', 'NN'], 'my': ['my', 'PRP$'], 'name': ['name', 'NN'], 'was': ['wa', 'VBD'], 'jiheon': ['jiheon', 'NN']}
>>>
